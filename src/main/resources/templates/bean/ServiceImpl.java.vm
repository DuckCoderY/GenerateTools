package ${package}${moduleName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${package}${moduleName}.dao.${className}Dao;
import ${package}${moduleName}.entity.${className}Entity;
import ${package}${moduleName}.service.${className}Service;
import ${package}${moduleName}.utils.DataConvertUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.Date;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */

@Service("${className}Service")
public class ${className}ServiceImpl extends ServiceImpl<${className}Dao, ${className}Entity> implements ${className}Service {

    @Autowired
    private ${className}Dao ${classNameLow}Dao;

    @Override
    public ${className}Dao getBaseMapper() {
        return ${classNameLow}Dao;
    }

    @Override
    public ${className}Entity find${className}ById(String id) {
        return ${classNameLow}Dao.selectById(id);
    }

    @Override
    public IPage<${className}Entity> page${className}(Map<String, Object> ${classNameLow}Pram, int currPage, int pageSize) {
        QueryWrapper<${className}Entity> query = new QueryWrapper<${className}Entity>();
        ${classNameLow}Pram.forEach((k, v) -> {
            if (!"currPage".equals(k) && !"pageSize".equals(k)) {
                query.eq(DataConvertUtils.convertNameJavaToColumn(k), v);
            }
        });
        Page<${className}Entity> page = new Page<${className}Entity>(currPage, pageSize);
        return this.page(page, query);
    }

    @Override
    public List<${className}Entity> find${className}List(Map<String, Object> ${classNameLow}Pram) {
        QueryWrapper<${className}Entity> queryWrapper = new QueryWrapper<>();
        ${classNameLow}Pram.forEach((k, v) -> {
            queryWrapper.eq(DataConvertUtils.convertNameJavaToColumn(k), v);
        });
        return this.list(queryWrapper);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public ${className}Entity save${className}(${className}Entity ${classNameLow}) {
        if (${classNameLow}.getId() == null) {
            this.save(${classNameLow});
        } else {
            this.updateById(${classNameLow});
        }
        return ${classNameLow};
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public void delete${className}ById(List<String> ids) {
        UpdateWrapper<${className}Entity> wrapper = new UpdateWrapper<>();
        wrapper.in("id", ids);
        this.remove(wrapper);
    }

}